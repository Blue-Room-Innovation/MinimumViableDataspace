#!/usr/bin/env bash
set -euo pipefail

# =====================================================
#  Eclipse Minimum Viable Dataspace (MVD) Cleanup Script
#  Safe full cleanup of Kind, Terraform, and Docker artifacts
# =====================================================

CLUSTER_NAME="mvd"
DEPLOY_DIR="./deployment/terraform"
CONFIRM=${1:-""}

echo "===================================================="
echo "üßπ Eclipse MVD Cleanup Utility"
echo "===================================================="
echo "üß© Target cluster: $CLUSTER_NAME"
echo "üìÇ Terraform dir: $DEPLOY_DIR"
echo

# -----------------------------------------------------
# 1Ô∏è‚É£ Confirmation prompt
# -----------------------------------------------------
if [[ "$CONFIRM" != "--yes" && "$CONFIRM" != "-y" ]]; then
  read -r -p "‚ö†Ô∏è  This will permanently delete the MVD cluster, Terraform state, and Docker containers. Continue? (y/N): " confirm
  if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo "‚ùå Aborted by user."
    exit 0
  fi
fi

# -----------------------------------------------------
# 2Ô∏è‚É£ Stop and remove Docker containers related to MVD
# -----------------------------------------------------
echo "üê≥ Searching for Docker containers related to '$CLUSTER_NAME'..."

# Guardamos la salida en una variable para evitar pipes bloqueantes
CONTAINERS=$(docker ps -a --filter "name=${CLUSTER_NAME}" --format "{{.ID}}" || true)

if [[ -z "${CONTAINERS}" ]]; then
  echo "‚ÑπÔ∏è No Docker containers found matching '$CLUSTER_NAME'."
else
  echo "üß± Found containers:"
  docker ps -a --filter "name=${CLUSTER_NAME}" --format "  - {{.Names}} ({{.ID}})"
  echo
  for id in ${CONTAINERS}; do
    echo "üß® Removing container ${id}..."
    docker rm -f "${id}" >/dev/null 2>&1 || true
  done
  echo "‚úÖ Containers removed."
fi
echo

# -----------------------------------------------------
# 3Ô∏è‚É£ Delete Kind cluster if exists
# -----------------------------------------------------
if kind get clusters | grep -q "^${CLUSTER_NAME}$"; then
  echo "üß© Deleting Kind cluster '${CLUSTER_NAME}'..."
  kind delete cluster --name "${CLUSTER_NAME}"
  echo "‚úÖ Cluster deleted."
else
  echo "‚ÑπÔ∏è No existing Kind cluster named '${CLUSTER_NAME}' found."
fi
echo

# -----------------------------------------------------
# 4Ô∏è‚É£ Cleanup Terraform state and cache
# -----------------------------------------------------
if [ -d "${DEPLOY_DIR}" ]; then
  echo "üóëÔ∏è  Cleaning Terraform state in ${DEPLOY_DIR}..."
  find "${DEPLOY_DIR}" -maxdepth 1 -type f \( \
    -name "terraform.tfstate*" -o \
    -name ".terraform.lock.hcl" \
  \) -exec rm -f {} \; || true
  rm -rf "${DEPLOY_DIR}/.terraform" || true
  echo "‚úÖ Terraform state cleaned."
else
  echo "‚ÑπÔ∏è Terraform directory not found. Skipping."
fi
echo


# -----------------------------------------------------
# 6Ô∏è‚É£ Final summary
# -----------------------------------------------------
echo "‚ú® Environment cleanup completed!"
echo "--------------------------------------"
echo "üß© Cluster '${CLUSTER_NAME}': removed"
echo "üì¶ Terraform state: deleted"
echo "--------------------------------------"
echo "‚úÖ Your system is now clean and ready for a fresh deployment."
